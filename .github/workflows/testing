name: Testing with Services

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    services:
      # PostgreSQL para el backend
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      # Redis para cache (si lo usas)
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Setup backend
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Start backend server
        working-directory: ./backend
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          python app.py &
          echo $! > backend.pid
          # Wait for server to start
          sleep 10
          # Verify server is running
          curl -f http://localhost:5000/health || exit 1
      
      # Setup frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Create test environment file
        working-directory: ./frontend
        run: |
          echo "REACT_APP_API_URL=http://localhost:5000" > .env.test.local
          echo "REACT_APP_ENV=testing" >> .env.test.local
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npx serve -s build -l 3000 &
          echo $! > frontend.pid
          # Wait for server to start
          sleep 5
          # Verify server is running
          curl -f http://localhost:3000 || exit 1
      
      # Run integration tests
      - name: Run backend integration tests
        working-directory: ./backend
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          FRONTEND_URL: http://localhost:3000
        run: pytest tests/integration/ -v
      
      - name: Run frontend integration tests
        working-directory: ./frontend
        env:
          REACT_APP_API_URL: http://localhost:5000
        run: npm run test:integration
      
      # End-to-end tests
      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install --with-deps
      
      - name: Run E2E tests
        run: |
          npx playwright test --config=e2e/playwright.config.js
        env:
          FRONTEND_URL: http://localhost:3000
          API_URL: http://localhost:5000
      
      # Cleanup
      - name: Stop servers
        if: always()
        run: |
          if [[ -f backend/backend.pid ]]; then
            kill $(cat backend/backend.pid) || true
          fi
          if [[ -f frontend/frontend.pid ]]; then
            kill $(cat frontend/frontend.pid) || true
          fi
      
      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            backend/htmlcov/
            frontend/coverage/
            e2e/test-results/
          retention-days: 7
